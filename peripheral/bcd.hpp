#pragma once

#include <cstdint>
#include "../mcu/mcu.hpp"
#include "../config/config.hpp"

class bcd {
    class mcu *mcu;
    struct config *config;

    uint8_t *bcdreg[4];

    uint8_t bcdmcn;
public:
    bool carry, zero, macro_running;
    uint8_t bcdcmd_req, bcdmcr_req;
    bool bcdcmd_pend, bcdmcr_pend;

private:
    uint16_t *curr_pgm;
    uint8_t pgm_counter;

    const uint16_t mul_pgm[32] = { 0x21B7, 0x21B6, 0x211A, 0x211A, 0x21A1, 0x86D0, 0x1F91, 0x2F91, 0x2F91, 0x2F91, 0x2F91, 0x2F91, 0x2F91, 0x2F91, 0x2F91, 0x2F91,
        0x1F91, 0x1F91, 0x1F91, 0x1F91, 0x1F91, 0x1F91, 0x1F1D, 0x161D, 0x212D, 0x1F19, 0x1619, 0x1719, 0x1819, 0x1919, 0x1A19, 0xE500 };
    const uint16_t div_pgm[32] = { 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0x7029, 0x7329, 0x4929, 0x681D, 0x671D, 0x061D,
        0x621D, 0x611D, 0x001D, 0x651D, 0x641D, 0x031D, 0x21B7, 0x21B6, 0x2116, 0x2116, 0x21B1, 0x22A0, 0x2181, 0x0A80, 0xFC00, 0xFC00 };
    const uint16_t divsn_pgm[32] = { 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0x7029, 0x7329, 0x4929, 0x681D, 0x671D, 0x061D,
        0x621D, 0x611D, 0x001D, 0x651D, 0x641D, 0x031D, 0x21B7, 0x21B6, 0x2116, 0x2116, 0x21CD, 0x0A8C, 0x21C1, 0x0A80, 0xFC00, 0xFC00 };
    const uint16_t sft_pgm[32] = { 0xC180, 0xC284, 0xC488, 0xC88C, 0xC181, 0xC285, 0xC489, 0xC88D, 0xC182, 0xC286, 0xC48A, 0xC88E, 0xC183, 0xC287, 0xC48B, 0xC88F,
        0xC190, 0xC294, 0xC498, 0xC89C, 0xC191, 0xC295, 0xC499, 0xC89D, 0xC192, 0xC296, 0xC49A, 0xC89E, 0xC193, 0xC297, 0xC49B, 0xC89F };

    const uint16_t* pgm_ptr[16] = { nullptr, nullptr, mul_pgm, mul_pgm, div_pgm, div_pgm, divsn_pgm, divsn_pgm,
        sft_pgm, sft_pgm, sft_pgm, sft_pgm, sft_pgm, sft_pgm, sft_pgm, sft_pgm };
    const uint8_t pgm_entry[16] = { 0x00, 0x00, 0x00, 0x05, 0x16, 0x1C, 0x16, 0x1C, 0x00, 0x04, 0x08, 0x0C, 0x10, 0x14, 0x18, 0x1C };

public:
    bcd(class mcu *);
    void reset();
    void tick();

    void run_command(uint8_t);
    void start_macro(uint8_t);
private:
    void shift_left(uint8_t, uint8_t, bool);
    void shift_right(uint8_t, uint8_t, bool);
};
